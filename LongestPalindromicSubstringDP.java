 static class Solution {
        public String longestPalindrome(String s) {
            int n = s.length();
            boolean[][] dp = new boolean[n][n];
            int[] ans = new int[]{0, 0};

            for (int i = 0; i < n; i++) {
                dp[i][i] = true;
            }

            for (int i = 0; i < n - 1; i++) {
                if (s.charAt(i) == s.charAt(i + 1)) {
                    dp[i][i + 1] = true;
                    ans[0] = i;
                    ans[1] = i + 1;
                }
            }

            for (int diff = 2; diff < n; diff++) {
                for (int i = 0; i < n - diff; i++) {
                    int j = i + diff;
                    if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {
                        dp[i][j] = true;
                        ans[0] = i;
                        ans[1] = j;
                    }
                }
            }

            int i = ans[0];
            int j = ans[1];
            return s.substring(i, j + 1);
        }
    }

/*
  Approach: DP
  Time complexity: O(n^2)
  Space complexity: O(n)

  In order to work with DP approach we need to find base case, for sub-string that is of length = 1,
  meaning it starts at same index and ends on  the same index;

  so if we have matrix of the string that has length of 10 characters like racecarxyz, we know certainly 
  that S[0,0], S[1,1] , S[2,2] are palindromes so we fill the diagonal 
  
  
    0   | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  |
  ---------------------------------------------------
0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
2  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
3  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
4  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
5  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
6  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
7  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  |
  ---------------------------------------------------
8  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  |
  ---------------------------------------------------
9  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  |
  ---------------------------------------------------

then we know for sure that if S[i] = S[i+1] then string is palindrome as well , it has length of 2 chars, like aa,bb etc.
so again for string racecarxyz we compare each pair of characters and fill DP[i,i+1] = S[i] == S[i+1],
in our case with racecarxyz there are no two such indices where neighbouring characters are the same

    0   | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  |
  ---------------------------------------------------
0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
2  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
3  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
4  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
5  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
6  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
7  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  |
  ---------------------------------------------------
8  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  |
  ---------------------------------------------------
9  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  |
  ---------------------------------------------------

then, having answers whether S[0,0] S[1,1] is palindrome, and having answers whether S[0,1] , S[1,2] are palindromes
we can follow simple logic that  if we move from bottom up then any substring S[i+1][j-1] of a palindrome should be palindrome as well
so if abba is palindrome , then bb should be palindrome as well.
So for each substrings with length of 3 chars we need to check if boundary characters are the same
S[i] == S[j]
 where i points to left most character, and j points to right-most character
 and that DP[i+1][j-1]  is also true, checking that inner part is also palindrome
 for substrings with length of 3, we simply relying on whether  S[i] == S[j] , because DP[i][i] is always true

 so again, in our 3rd iteration for string
 racecarxyz we will have the following, only DP[2,4] is true because only substring cec has boundary chars that are the same

    0   | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  |
  ---------------------------------------------------
0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
2  | 0  | 0  | 1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
3  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
4  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
5  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
6  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
7  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  |
  ---------------------------------------------------
8  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  |
  ---------------------------------------------------
9  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  |
  ---------------------------------------------------

 then moving forward it becomes more interesting, so having substrings of length = 4
 both conditions S[i] == S[j] and DP[i+1][j-1] might be false , but our substring is a palindrome only if both are true

 so for 4th iteration given the string
 racecarxyz
 we will have no such substrings with length =4  where boundary chars are the same, so we keep 'false' in those cells

    0   | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  |
  ---------------------------------------------------
0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
2  | 0  | 0  | 1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
3  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
4  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
5  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
6  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
7  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  |
  ---------------------------------------------------
8  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  |
  ---------------------------------------------------
9  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  |
  ---------------------------------------------------

 for 5th iteration given the string
 racecarxyz
 we will have only S[1,5] 'aceca'  with length = 5  where boundary chars are the same and DP[i+1][j-1] is true

    0   | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  |
  ---------------------------------------------------
0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
1  | 0  | 1  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
2  | 0  | 0  | 1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
3  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
4  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
5  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
6  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
7  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  |
  ---------------------------------------------------
8  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  |
  ---------------------------------------------------
9  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  |
  ---------------------------------------------------

for 6th iteration given the string
 racecarxyz
 we will have no substrings  with length = 6  where boundary chars are the same and DP[i+1][j-1] is true

    0   | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  |
  ---------------------------------------------------
0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
1  | 0  | 1  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
2  | 0  | 0  | 1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
3  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
4  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
5  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
6  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
7  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  |
  ---------------------------------------------------
8  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  |
  ---------------------------------------------------
9  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  |
  ---------------------------------------------------

for 7th iteration given the string
 racecarxyz
 we will have S[0,6] 'racecar'  with length = 7  where boundary chars are the same and DP[i+1][j-1] is true

    0   | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  |
  ---------------------------------------------------
0  | 1  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
1  | 0  | 1  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
2  | 0  | 0  | 1  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
3  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
4  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
5  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  | 0  |
  ---------------------------------------------------
6  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  | 0  |
  ---------------------------------------------------
7  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | 0  |
  ---------------------------------------------------
8  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  |
  ---------------------------------------------------
9  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 1  |
  ---------------------------------------------------


In conclusion the logic is that we iterate through a diff parameter, that indicates index difference between boundary indices
of potential palindrome substrings, and then we iterate through string, checking option that palindrome starts at any S[i]
and ends at any S[i+diff] and if we find such substtring S[i, i+diff] where S[i] == S[i+diff] and DP[i+1][i+diff-1] == true
then we update our DP matrix and update our answer 
 */
